// FILE: MultibindingsHaveConsistentOrderAcrossContributedGraph.kt

@Inject
class TaskImpl1 : Task {
  @Deprecated(message = "This synthesized declaration should not be used directly", level = DeprecationLevel.HIDDEN)
  object $$MetroFactory : Factory<TaskImpl1> {
    private constructor() /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

    fun create(): Factory<TaskImpl1> {
      return $$MetroFactory
    }

    fun newInstance(): TaskImpl1 {
      return TaskImpl1()
    }

    override operator fun invoke(): TaskImpl1 {
      return $$MetroFactory.newInstance()
    }

    fun mirrorFunction(): TaskImpl1 {
      return error(message = "Never called")
    }

  }

  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

}

@Inject
class TaskImpl2 : Task {
  @Deprecated(message = "This synthesized declaration should not be used directly", level = DeprecationLevel.HIDDEN)
  object $$MetroFactory : Factory<TaskImpl2> {
    private constructor() /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

    fun create(): Factory<TaskImpl2> {
      return $$MetroFactory
    }

    fun newInstance(): TaskImpl2 {
      return TaskImpl2()
    }

    override operator fun invoke(): TaskImpl2 {
      return $$MetroFactory.newInstance()
    }

    fun mirrorFunction(): TaskImpl2 {
      return error(message = "Never called")
    }

  }

  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

}

class TaskImpl3 : Task {
  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

}

class TaskImpl4 : Task {
  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

}

@DependencyGraph(scope = AppScope::class)
interface ExampleGraph : $$MetroContributionToAppScope {
  @Deprecated(message = "This synthesized declaration should not be used directly", level = DeprecationLevel.HIDDEN)
  abstract class $$BindsMirror {
    private constructor() /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

    @Binds
    @IntoSet
    @CallableMetadata(callableName = "<get-bind>", isPropertyAccessor = true, startOffset = 297, endOffset = 337)
    abstract fun TaskImpl1.bind_intoset(): Task

    @Binds
    @IntoSet
    @CallableMetadata(callableName = "<get-bind>", isPropertyAccessor = true, startOffset = 254, endOffset = 294)
    abstract fun TaskImpl2.bind_intoset(): Task

  }

  companion object Companion {
    private constructor() /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

    @GraphFactoryInvokeFunctionMarker
    operator fun invoke(): ExampleGraph {
      return $$MetroGraph()
    }

  }

  @Deprecated(message = "This synthesized declaration should not be used directly", level = DeprecationLevel.HIDDEN)
  class $$MetroGraph : ExampleGraph {
    private /* final field */ val thisGraphInstance: ExampleGraph = <this>
    private /* final field */ val thisGraphInstanceProvider: Provider<ExampleGraph> = Companion.invoke<ExampleGraph>(value = <this>.#thisGraphInstance)
    private /* final field */ val provide4Provider: Provider<Task> = Companion.create(instance = <this>.#thisGraphInstance)
    private /* final field */ val provide3Provider: Provider<Task> = Companion.create(instance = <this>.#thisGraphInstance)
    @DependencyGraph(scope = Unit::class)
    class LoggedInGraphImpl : LoggedInGraph {
      private /* final field */ val exampleGraphInstance: $$MetroGraph = $$MetroGraph
      private /* final field */ val exampleGraphInstanceProvider: Provider<$$MetroGraph> = Companion.invoke<$$MetroGraph>(value = $$MetroGraph)
      private /* final field */ val provide4Provider: Provider<Task> = Companion.create(instance = <this>.#exampleGraphInstance)
      private /* final field */ val provide3Provider: Provider<Task> = Companion.create(instance = <this>.#exampleGraphInstance)
      constructor($$MetroGraph: $$MetroGraph) /* primary */ {
        super/*Any*/()
        /* <init>() */

      }

      override val tasksFromParent: Set<Task>
        override get(): Set<Task> {
          return buildSet<Task>(capacity = 4, builderAction = local fun MutableSet<Task>.<anonymous>() {
            $receiver.add(element = <this>.#provide4Provider.invoke())
            $receiver.add(element = <this>.#provide3Provider.invoke())
            $receiver.add(element = $$MetroFactory.create().invoke())
            $receiver.add(element = $$MetroFactory.create().invoke())
          }
)
        }

    }

    private constructor() /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

    @Deprecated(message = "This synthesized declaration should not be used directly", level = DeprecationLevel.HIDDEN)
    @MetroAccessor(isInstanceAccessor = true)
    fun accessor_GEvyBX8(): ExampleGraph {
      return <this>.#thisGraphInstance
    }

    @Deprecated(message = "This synthesized declaration should not be used directly", level = DeprecationLevel.HIDDEN)
    @MetroAccessor
    fun accessor_GEvyBX8_provider(): Provider<ExampleGraph> {
      return <this>.#thisGraphInstanceProvider
    }

    override fun createLoggedInGraph(): LoggedInGraph {
      return LoggedInGraphImpl($$MetroGraph = <this>)
    }

    @IntoSet
    @Binds
    override val TaskImpl2.bind: Task
      override get(): Task {
        return error(message = "Never called")
      }

    @IntoSet
    @Binds
    override val TaskImpl1.bind: Task
      override get(): Task {
        return error(message = "Never called")
      }

    override val tasks: Set<Task>
      override get(): Set<Task> {
        return buildSet<Task>(capacity = 4, builderAction = local fun MutableSet<Task>.<anonymous>() {
          $receiver.add(element = <this>.#provide4Provider.invoke())
          $receiver.add(element = <this>.#provide3Provider.invoke())
          $receiver.add(element = $$MetroFactory.create().invoke())
          $receiver.add(element = $$MetroFactory.create().invoke())
        }
)
      }

  }

  @Deprecated(message = "This synthesized declaration should not be used directly", level = DeprecationLevel.HIDDEN)
  @CallableMetadata(callableName = "provide3", isPropertyAccessor = false, startOffset = 396, endOffset = 449)
  class Provide3$$MetroFactory : Factory<Task> {
    private /* final field */ val instance: ExampleGraph = instance
    companion object Companion {
      private constructor() /* primary */ {
        super/*Any*/()
        /* <init>() */

      }

      fun create(instance: ExampleGraph): Factory<Task> {
        return Provide3$$MetroFactory(instance = instance)
      }

      fun provide3(instance: ExampleGraph): Task {
        return instance.provide3()
      }

    }

    private constructor(instance: ExampleGraph) /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

    override operator fun invoke(): Task {
      return Companion.provide3(instance = <this>.#instance)
    }

    @IntoSet
    fun mirrorFunction(): Task {
      return error(message = "Never called")
    }

  }

  @Deprecated(message = "This synthesized declaration should not be used directly", level = DeprecationLevel.HIDDEN)
  @CallableMetadata(callableName = "provide4", isPropertyAccessor = false, startOffset = 340, endOffset = 393)
  class Provide4$$MetroFactory : Factory<Task> {
    private /* final field */ val instance: ExampleGraph = instance
    companion object Companion {
      private constructor() /* primary */ {
        super/*Any*/()
        /* <init>() */

      }

      fun create(instance: ExampleGraph): Factory<Task> {
        return Provide4$$MetroFactory(instance = instance)
      }

      fun provide4(instance: ExampleGraph): Task {
        return instance.provide4()
      }

    }

    private constructor(instance: ExampleGraph) /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

    override operator fun invoke(): Task {
      return Companion.provide4(instance = <this>.#instance)
    }

    @IntoSet
    fun mirrorFunction(): Task {
      return error(message = "Never called")
    }

  }

  @IntoSet
  @Provides
  private fun provide3(): Task {
    return TaskImpl3()
  }

  @IntoSet
  @Provides
  private fun provide4(): Task {
    return TaskImpl4()
  }

  @IntoSet
  @Binds
  abstract val TaskImpl2.bind: Task
    abstract get

  @IntoSet
  @Binds
  abstract val TaskImpl1.bind: Task
    abstract get

  abstract val tasks: Set<Task>
    abstract get

}

@GraphExtension(scope = Unit::class)
interface LoggedInGraph {
  @Factory
  @ContributesTo(scope = AppScope::class)
  interface Factory1 {
    @Deprecated(message = "This synthesized declaration should not be used directly", level = DeprecationLevel.HIDDEN)
    @MetroContribution(scope = AppScope::class)
    interface $$MetroContributionToAppScope : Factory1 {
    }

    abstract fun createLoggedInGraph(): LoggedInGraph

  }

  abstract val tasksFromParent: Set<Task>
    abstract get

}

interface Task {
}

object AppScope {
  private constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

}

// FILE: loggedInGraphFactory1AppScope.kt
package metro.hints

fun AppScope(contributed: Factory1) {
  return error(message = "Never called")
}

