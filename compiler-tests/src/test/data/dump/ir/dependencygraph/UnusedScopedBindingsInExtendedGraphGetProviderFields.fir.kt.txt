@SingleIn(scope = AppScope::class)
@DependencyGraph(isExtendable = true)
interface AppGraph {
  companion object Companion {
    private constructor() /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

    @GraphFactoryInvokeFunctionMarker
    operator fun invoke(): AppGraph {
      return $$MetroGraph()
    }

  }

  @Deprecated(message = "This synthesized declaration should not be used directly", level = DeprecationLevel.HIDDEN)
  class $$MetroGraph : AppGraph {
    private /* final field */ val thisGraphInstance: AppGraph = <this>
    private /* final field */ val appGraphProvider: Provider<AppGraph> = Companion.invoke<AppGraph>(value = <this>.#thisGraphInstance)
    private /* final field */ val provideStringProvider: Provider<String> = Companion.provider<Provider<String>, String>(delegate = Companion.create(instance = <this>.#thisGraphInstance))
    private constructor() /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

    @Deprecated(message = "This synthesized declaration should not be used directly", level = DeprecationLevel.HIDDEN)
    @MetroAccessor
    fun appGraphProvider_metroAccessor(): Provider<AppGraph> {
      return <this>.#appGraphProvider
    }

    @Deprecated(message = "This synthesized declaration should not be used directly", level = DeprecationLevel.HIDDEN)
    @MetroAccessor
    fun provideStringProvider_metroAccessor(): Provider<String> {
      return <this>.#provideStringProvider
    }

    @Deprecated(message = "This synthesized declaration should not be used directly", level = DeprecationLevel.HIDDEN)
    @MetroAccessor(isInstanceAccessor = true)
    fun thisGraphInstance_metroAccessor(): AppGraph {
      return <this>.#thisGraphInstance
    }

    override val int: Int
      override get(): Int {
        return Companion.create(instance = <this>.#thisGraphInstance).invoke()
      }

  }

  @Deprecated(message = "This synthesized declaration should not be used directly", level = DeprecationLevel.HIDDEN)
  @CallableMetadata(callableName = "provideInt", isPropertyAccessor = false, startOffset = 279, endOffset = 322)
  class ProvideInt$$MetroFactory : Factory<Int> {
    private /* final field */ val instance: AppGraph = instance
    companion object Companion {
      private constructor() /* primary */ {
        super/*Any*/()
        /* <init>() */

      }

      fun create(instance: AppGraph): Factory<Int> {
        return ProvideInt$$MetroFactory(instance = instance)
      }

      fun provideInt(instance: AppGraph): Int {
        return instance.provideInt()
      }

    }

    private constructor(instance: AppGraph) /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

    override operator fun invoke(): Int {
      return Companion.provideInt(instance = <this>.#instance)
    }

    fun mirrorFunction(): Int {
      return error(message = "Never called")
    }

  }

  @Deprecated(message = "This synthesized declaration should not be used directly", level = DeprecationLevel.HIDDEN)
  @CallableMetadata(callableName = "provideString", isPropertyAccessor = false, startOffset = 117, endOffset = 276)
  class ProvideString$$MetroFactory : Factory<String> {
    private /* final field */ val instance: AppGraph = instance
    companion object Companion {
      private constructor() /* primary */ {
        super/*Any*/()
        /* <init>() */

      }

      fun create(instance: AppGraph): Factory<String> {
        return ProvideString$$MetroFactory(instance = instance)
      }

      fun provideString(instance: AppGraph): String {
        return instance.provideString()
      }

    }

    private constructor(instance: AppGraph) /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

    override operator fun invoke(): String {
      return Companion.provideString(instance = <this>.#instance)
    }

    @SingleIn(scope = AppScope::class)
    fun mirrorFunction(): String {
      return error(message = "Never called")
    }

  }

  @Provides
  private final fun provideInt(): Int {
    return 3
  }

  @Provides
  @SingleIn(scope = AppScope::class)
  private fun provideString(): String {
    return "Hi"
  }

  abstract val int: Int
    abstract get

}

