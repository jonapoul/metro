// FILE: UnusedScopedConstructorInjectedClassWithConstructorAnnotatedIsDiscovered.kt

@Inject
@SingleIn(scope = LoggedInScope::class)
class ChildDependency {
  val dep: Dependency
    field = dep
    get

  @Deprecated(message = "This synthesized declaration should not be used directly", level = DeprecationLevel.HIDDEN)
  class $$MetroFactory : Factory<ChildDependency> {
    private /* final field */ val dep: Provider<Dependency> = dep
    companion object Companion {
      private constructor() /* primary */ {
        super/*Any*/()
        /* <init>() */

      }

      fun create(dep: Provider<Dependency>): Factory<ChildDependency> {
        return $$MetroFactory(dep = dep)
      }

      fun newInstance(dep: Dependency): ChildDependency {
        return ChildDependency(dep = dep)
      }

    }

    private constructor(dep: Provider<Dependency>) /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

    override operator fun invoke(): ChildDependency {
      return Companion.newInstance(dep = <this>.#dep.invoke())
    }

    @SingleIn(scope = LoggedInScope::class)
    fun mirrorFunction(dep: Dependency): ChildDependency {
      return error(message = "Never called")
    }

  }

  constructor(dep: Dependency) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

}

@SingleIn(scope = AppScope::class)
class Dependency {
  @Deprecated(message = "This synthesized declaration should not be used directly", level = DeprecationLevel.HIDDEN)
  object $$MetroFactory : Factory<Dependency> {
    private constructor() /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

    fun create(): Factory<Dependency> {
      return $$MetroFactory
    }

    fun newInstance(): Dependency {
      return Dependency()
    }

    override operator fun invoke(): Dependency {
      return $$MetroFactory.newInstance()
    }

    @SingleIn(scope = AppScope::class)
    fun mirrorFunction(): Dependency {
      return error(message = "Never called")
    }

  }

  @Inject
  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

}

@DependencyGraph(scope = AppScope::class)
interface ExampleGraph : $$MetroContributionToAppScope {
  companion object Companion {
    private constructor() /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

    @GraphFactoryInvokeFunctionMarker
    operator fun invoke(): ExampleGraph {
      return $$MetroGraph()
    }

  }

  @Deprecated(message = "This synthesized declaration should not be used directly", level = DeprecationLevel.HIDDEN)
  class $$MetroGraph : ExampleGraph {
    private /* final field */ val dependencyProvider: Provider<Dependency> = Companion.provider<Provider<Dependency>, Dependency>(delegate = $$MetroFactory.create())
    @DependencyGraph(scope = LoggedInScope::class)
    class LoggedInGraphImpl : LoggedInGraph {
      private /* final field */ val exampleGraphInstance: $$MetroGraph = $$MetroGraph
      private /* final field */ val exampleGraphInstanceProvider: Provider<$$MetroGraph> = Companion.invoke<$$MetroGraph>(value = $$MetroGraph)
      private /* final field */ val dependencyProvider: Provider<Dependency> = provider<Dependency>(provider = local fun <anonymous>(): Dependency {
        return <this>.#exampleGraphInstance.accessor_kKldZjk_provider().invoke()
      }
)
      private /* final field */ val childDependencyProvider: Provider<ChildDependency> = Companion.provider<Provider<ChildDependency>, ChildDependency>(delegate = Companion.create(dep = <this>.#dependencyProvider))
      constructor($$MetroGraph: $$MetroGraph) /* primary */ {
        super/*Any*/()
        /* <init>() */

      }

      override val childDependency: ChildDependency
        override get(): ChildDependency {
          return <this>.#childDependencyProvider.invoke()
        }

    }

    private constructor() /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

    @Deprecated(message = "This synthesized declaration should not be used directly", level = DeprecationLevel.HIDDEN)
    @MetroAccessor
    fun accessor_kKldZjk_provider(): Provider<Dependency> {
      return <this>.#dependencyProvider
    }

    override fun createLoggedInGraph(): LoggedInGraph {
      return LoggedInGraphImpl($$MetroGraph = <this>)
    }

  }

}

@GraphExtension(scope = LoggedInScope::class)
interface LoggedInGraph {
  @Factory
  @ContributesTo(scope = AppScope::class)
  interface Factory {
    @Deprecated(message = "This synthesized declaration should not be used directly", level = DeprecationLevel.HIDDEN)
    @MetroContribution(scope = AppScope::class)
    interface $$MetroContributionToAppScope : Factory {
    }

    abstract fun createLoggedInGraph(): LoggedInGraph

  }

  abstract val childDependency: ChildDependency
    abstract get

}

sealed interface LoggedInScope {
}

// FILE: loggedInGraphFactoryAppScope.kt
package metro.hints

fun AppScope(contributed: Factory) {
  return error(message = "Never called")
}

